library(devtools)
devtools::document()
devtools::build()
setwd("../")
setwd("../")
#### test the package
install("snQTL_0.1.tar.gz")
#### test the package
install.packages("snQTL_0.1.tar.gz")
library(snQTL)
library(snQTL)
library(sLED)
library(devtools)
devtools::document()
rlang::last_trace()
setwd("/Users/jiaxinhu/Desktop/netQTL/code/software/snQTL/R")
devtools::document()
devtools::build()
library(snQTL)
remove.packages("snQTL")
library(devtools)
devtools::document()
devtools::build()
library(devtools)
document()
build()
library(devtools)
devtools::document()
build()
remove.packages("snQTL")
library(devtools)
document()
build()
# Dependencies (Just for construction)
source("symmPMD.R")
source("SSTD.R")
source("tensor_class.R")
source("tensor_product.R")
# Brick function 2: get pairwise correlation differential network from expression ------------------
get_diffnet_from_exp = function(X, Y, adj.beta = -1, trans = FALSE, location = NULL){
if (adj.beta < 0) {
Dmat <- cov(Y) - cov(X)
} else if (adj.beta == 0) {
Dmat <- cor(Y) - cor(X)
} else {
Dmat <- abs(cor(Y))^adj.beta - abs(cor(X))^adj.beta
}
if(trans){
# location: the locations of each gene, only positive numbers refer to a valid location
locs = unique(location)[unique(location) >= 0]
for (i in locs) {
ind_vec = location == i
# delete the entries when two loci within the same location
Dmat[ind_vec, ind_vec] = 0
}
}
return(Dmat)
}
# Brick function 2: get a list of differential matrices between multiple networks ------------------
get_diffnet_list_from_exp = function(exp_list, adj.beta = -1, trans = FALSE, location = NULL){
# net_list, list of networks
k = length(exp_list)
# collect all k(k-1)/2 pairwise diffnet
diffnet_list = vector(mode = "list", length = k*(k-1)/2)
count = 1
for (i in 1:(k-1)) {
for (j in (i+1):k) {
diffnet_list[[count]] = get_diffnet_from_exp(exp_list[[j]], exp_list[[i]], adj.beta, trans, location)
count = count + 1
}
}
return(diffnet_list)
}
# Brick function 1: sLME for matrices (from sLED test) --------------------------
sLME = function(Dmat, rho=1000, sumabs.seq=0.2,
niter=20, trace=FALSE){
ndim <- 1 ## only consider the first sparse eigenvector
p <- ncol(Dmat)
ntest <- length(sumabs.seq)
results <- list()
results$sumabs.seq <- sumabs.seq
results$rho <- rho
results$stats <- rep(NA, ntest)
results$sign <- rep(NA, ntest)
results$v <- matrix(NA, nrow=ntest, ncol=p)
results$leverage <- matrix(NA, nrow=ntest, ncol=p)
## for each sparsity parameter
for (i in 1:ntest) {
sumabs <- sumabs.seq[i]
pos.out <- symmPMD(Dmat + rho * diag(p),
sumabs=sumabs, trace=trace, niter=niter)
neg.out <- symmPMD(- Dmat + rho * diag(p),
sumabs=sumabs, trace=trace, niter=niter)
if (pos.out$d >= neg.out$d) {
results$sign[i] <- "pos"
results$stats[i] <- pos.out$d - rho
results$v[i, ] <- pos.out$v
results$leverage[i, ] <- (pos.out$v)^2
} else {
results$sign[i] <- "neg"
results$stats[i] <- neg.out$d - rho
results$v[i, ] <- neg.out$v
results$leverage[i, ] <- (neg.out$v)^2
}
}
return(results)
}
library(devtools)
devtools::document()
devtools::document()
devtools::build()
remove.packages("snQTL")
library(devtools)
build()
build()
build()
library(devtools)
build()
library(devtools)
document()
build()
library(devtools)
document()
build()
library(devtools)
document()
document()
library(devtools)
document()
build()
library(devtools)
document()
document()
document()
library(devtools)
document()
document()
document()
library(devtools)
document()
document()
# K = 5
n1 = 50
n2 = 60
n3 = 100
n4 = 50
n5 = 80
p = 200
location = c(rep(1,20), rep(2, 50), rep(3, 100), rep(4, 30))
# ## expression data from null
# set.seed(0406) # random seeds for example data
# exp1 = matrix(rnorm(n1*p, mean = 0, sd = 1), nrow = n1)
# exp2 = matrix(rnorm(n2*p, mean = 0, sd = 1), nrow = n2)
# exp3 = matrix(rnorm(n3*p, mean = 0, sd = 1), nrow = n3)
# exp4 = matrix(rnorm(n4*p, mean = 0, sd = 1), nrow = n4)
# exp5 = matrix(rnorm(n5*p, mean = 0, sd = 1), nrow = n5)
#
#
# exp_list = list(exp1, exp2, exp3, exp4, exp5)
exp_list = list(exp1, exp2, exp3)
## expression data from null
set.seed(0406) # random seeds for example data
exp1 = matrix(rnorm(n1*p, mean = 0, sd = 1), nrow = n1)
exp2 = matrix(rnorm(n2*p, mean = 0, sd = 1), nrow = n2)
exp3 = matrix(rnorm(n3*p, mean = 0, sd = 1), nrow = n3)
exp4 = matrix(rnorm(n4*p, mean = 0, sd = 1), nrow = n4)
exp5 = matrix(rnorm(n5*p, mean = 0, sd = 1), nrow = n5)
exp_list = list(exp1, exp2, exp3, exp4, exp5)
exp_list = list(exp1, exp2, exp3)
snQTL_test_corrnet(exp_list = exp_list, method = 'tensor',
npermute = 50, seeds = 1:50, stats_seed = 0416,
trans = TRUE, location = location)
snQTL_test_corrnet(exp_list = exp_list, method = 'tensor',
npermute = 20, seeds = 1:20, stats_seed = 0416,
trans = TRUE, location = location)
test$emp_p_value
library(devtools)
document()
library(devtools)
document()
library(devtools)
document()
